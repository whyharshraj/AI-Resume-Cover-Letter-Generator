# -*- coding: utf-8 -*-
"""AI Resume & Cover Letter Generator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yZR2C9SYtI3o66dU9Jw74IZbBmtPfm4k

# - transformers: for using pre-trained language models like GPT-2, BERT, etc.
# - gradio: for creating user-friendly web interfaces for ML **models**
"""

!pip install transformers gradio

"""# Import the pipeline function and set_seed utility from the Hugging Face transformers library.
# Import the Gradio library to create an interactive web interface for the model.
"""

from transformers import pipeline, set_seed
import gradio as gr

"""# Create a text generation pipeline using the pre-trained GPT-2 model.
# Set a random seed to make the text generation results reproducible.


"""

generator = pipeline('text-generation', model='gpt2')
set_seed(42)

def generate_resume(job_title, experience, skills, career_goals):
    # Strong and clear prompt for better structured output
    prompt = f"""
You are an expert career assistant. Based on the following information, generate both a resume summary and a formal cover letter.

Job Title: {job_title}
Experience: {experience}
Skills: {skills}
Career Goals: {career_goals}

### Resume Summary:
(Write a short, professional resume summary.)

### Cover Letter:
(Write a complete cover letter with a greeting, body, and closing.)
"""
# Generate longer output so both parts can fit
    output = generator(prompt, max_length=550, num_return_sequences=1)[0]['generated_text']
# Try to extract both sections reliably
    if "### Cover Letter:" in output:
        resume_part = output.split("### Cover Letter:")[0].replace("### Resume Summary:", "").strip()
        cover_letter_part = output.split("### Cover Letter:")[1].strip()
    else:
        resume_part = output.strip()
        cover_letter_part = " Cover letter could not be generated. Try adjusting your input or prompt."

    return resume_part, cover_letter_part

# Create a Gradio interface to interact with the generate_resume function.
iface = gr.Interface(
    fn=generate_resume,  # The function to call when the user submits input

# Define input components: four textboxes for job title, experience, skills, and career goals
    inputs=[
        gr.Textbox(label="Job Title"),
        gr.Textbox(label="Experience (in brief)"),
        gr.Textbox(label="Skills (comma-separated)"),
        gr.Textbox(label="Career Goals"),
    ],

# Define output components: two textboxes to display the resume summary and cover letter
    outputs=[
        gr.Textbox(label="Resume Summary"),
        gr.Textbox(label="Cover Letter"),
    ],
# Set the title and description shown at the top of the web app
    title="AI Resume & Cover Letter Generator",
    description="Enter your info to get an AI-generated resume summary and cover letter using GPT-2."
)
# Launch the Gradio web interface in a local browser window
iface.launch()